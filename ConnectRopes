/*Given n ropes of different lengths, connect them into a single rope with minimum cost. Assume that the cost to connect two ropes is the same as the sum of their lengths.

For example,

Input:  [5, 4, 2, 8]
 
Output: The minimum cost is 36
  
[5, 4, 2, 8] –> First, connect ropes of lengths 4 and 2 that will cost 6.
[5, 6, 8]    –> Next, connect ropes of lengths 5 and 6 that will cost 11.
[11, 8]      –> Finally, connect the remaining two ropes that will cost 19.
 
Therefore, the total cost for connecting all ropes is 6 + 11 + 19 = 36.

*/


package connect_ropes;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.io.*;

public class ConnectRopes {

	static int minCost(int arr[],int n) {
		PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
		for(int i=0;i<n;i++) {
			pq.add(arr[i]);
		}
		int res=0;
		int cost=0;
		while(pq.size()>1) {
			int first=pq.poll();
			int second=pq.poll();
			res=first+second;
			pq.add(res);
		    cost += res;
		}
		return cost;
	}
	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		for(int i=0;i<n;i++) {
			arr[i]=sc.nextInt();
			}
		System.out.println("mincost"+minCost(arr,n));
	}
	
}
